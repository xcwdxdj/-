
//import edu.princeton.cs.algs4.StdIn;
import java.util.concurrent.locks.StampedLock;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

/*public class unionFind()
 * 	UF(int N)					@以整数标识（0到N-1）初始化N个触点
 * 	void	union(int p, int q)	@在p和q之间加一条联系
 * 	int 	find(int p)			@p（0~N-1）所在的分量的标识符
 *	boolean	connected(int p,int q)@如果p，q之间存在同一个分量中则返回true 
 * 	int		count()				@连通分量的数量
 * */

public class UF {
	private int[] id;
	private int count;
	private int[] sz;	//size of component for roots (site indexed)(我认为好的翻译应该是：从这个索引点到它的根节点中连接的数量（可见教材翻译的和屎一样，操）)
	public UF(int N){
		count = N;
		id = new int[N];
		for(int i=0; i<N; i++){
			id[i] = i;
		}	
		for(int i=0; i<N; i++){
			sz[i] = 1;
		}	
	}	
	public int count(){
		return count;
	}
	public int find(int p){
		while(p!=id[p]) p=id[p];
		return p;
	}
	public void union(int p,int q){
		int i = find(p);//i = proot
		int j = find(q);//j = qroot
		if(i == j) return;
		else{
			if(sz[i]<sz[j]){
				id[i] = j;
				sz[j] += sz[i];
			}
			else{
				id[j] = i;
				sz[i] += sz[j];
			}
		}
		count--;
	}
	boolean	connected(int p,int q){
		return (find(p)==find(q));
	}
	public void main(){
		int N = StdIn.readInt();
		UF uf = new UF(N);
		while(!StdIn.isEmpty()){
			int p = StdIn.readInt();
			int q = StdIn.readInt();
			if(connected(p,q))	continue;
			uf.union(p,q);
			StdOut.println(p+" "+q);
		}
		StdOut.print(uf.count()+"components");
	}
	
}


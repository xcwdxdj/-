package unionFind;
//import edu.princeton.cs.algs4.StdIn;
import java.util.concurrent.locks.StampedLock;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

/*public class unionFind()
 * 	UF(int N)					@以整数标识（0到N-1）初始化N个触点
 * 	void	union(int p, int q)	@在p和q之间加一条联系
 * 	int 	find(int p)			@p（0~N-1）所在的分量的标识符
 *	boolean	connected(int p,int q)@如果p，q之间存在同一个分量中则返回true 
 * 	int		count()				@连通分量的数量
 * */

public class UF {
	private int[] id;
	private int count;
	public UF(int N){
		count = N;
		id = new int[N];
		for(int i=0; i<N; i++){
			id[i] = i;
		}	
	}	
	public int count(){
		return count;
	}
	/*我最早的答案
	public void union(int p, int q){
		for(int i=0; i<count; i++){
			if(id[i] == find(p)){
				id[i] = id[q];
			}
		}
		id[p] = id[q];
	}
	
	*/
	
	/*quick-find*/
	public void union(int p,int q){
		int pID = find(p);
		int qID = find(q);
		//当p,q在同一个分量中时，不做任何处理
		if(pID == qID) return; 
		for(int i=0; i<id.length; i++){
			if(id(i)==pID) id(i)=qID;
		}
		count--;
	}
	public int find(int p){
		int idp = id[p];
		return idp;
	}
	boolean	connected(int p,int q){
		return (find(p)==find(q));
	}
	public void main(){
		int N = StdIn.readInt();
		UF uf = new UF(N);
		while(!StdIn.isEmpty()){
			int p = StdIn.readInt();
			int q = StdIn.readInt();
			if(connected(p,q))	continue;
			uf.union(p,q);
			StdOut.println(p+" "+q);
		}
		StdOut.print(uf.count()+"components");
	}
	
}
